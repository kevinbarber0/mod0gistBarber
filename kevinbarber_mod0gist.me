Mod 0 Gist Kevin Barber

He/Him [11/27/23] Cohort Back-End

About Me:

My name is Kevin Barber I am interested in changing careers from real estate development to software development.  I am excited to see what new things I can learn on this journey with the Turing School.


----------
Data Tupes:
1. String - Any series of characters (alpha, numeric, or symbol) between quotation marks
2. Integer - Any whole positive or negative number, including 0
3. Float - Any positive or negative number that involves a decimal
4. Boolean - true or false


----------
Arrays:
1. An Array is a Ruby Data Type that allows us to store multiple pieces of data in one variable. They can be compared to lists. The Array is an incredibly powerful and necessary Data Type for building web applications.
2. An Array is declared with the square brackets (they can be typed with the keys to the right of the p character on your keyboard). Each piece of data in an Array is referred to as an element. Elements should be separated with a comma and space. An Array can hold any number of elements.
3.  students = ["Cindy", "Josiah", "Rigo"]


----------
Asking Technical Questions:

1. What are the steps you will take when asking a technical question?
    - Use effective key words in a Google search
    - Ask technical questions that are both clear and concise
    - Ask in Slack

2. We lay out these steps in a particular order. What do you think the reasoning behind this might be?
    - This empowers us to be able to identify and solve issues and use the skills we will be using in the real world.
    
3. How will you refer back to this question-asking strategy while in Mods 1 and beyond?
    - I will refer to these steps and follow them when I run into issues after class/office hours.


----------
Git Workflow: 
1. How confident do you feel in your understanding and fluency with the Git workflow?
    - I am very confident.
2. What do you still need to practice or learn? How will you do that?
    - I will practive pull requestes before Mod 1
3. What part of the Git Workflow is still confusing for you?
    - None.


----------
DTR:
1. How would you describe your preferred working style? (Alone,in groups, etc.)
        - I prefer to work alone but I work well in groups.

2. What strengths do you bring to a team?
        -Critical thinking and strong problem solving skills.
        -High stress tolerance
        

3. What’s gone well or poorly in your previous group project settings? What can you do to either ensure those best practices carry over into projects here or to avoid common pitfalls that might come up?
        -Clear thinking in high stress/complex situations.  This ability has allowed me to perform well in business and prior endeavours.

4. How do you prefer to handle disagreements that come up? (Yes, they will come up!)
        -Clearly explain or demonstrate my thinking and solution on the issue and allow our group or the other person to make the final decision during the lab or project.

5. How do you communicate best? What tools do you need to communicate well with your teammates?
        -I am better at speaking than writing/messaging.

6. How do you prefer to receive feedback? How do you prefer to give feedback?
        -I recieve feedback well and prefer very detailed info on how I can improve or change.

7. What scheduling constraints do you have? What are your preferred work times outside of normal school hours?
        - No constaints. Anytime is preffered.


--------
Calendaring & Time Management
1. What times will you dedicate to pre-teaching the upcoming lesson?
    - two hours pre lesson

2. What times will you dedicate to reviewing lessons?
    - two hours post lesson

3. What time will you dedicate to project work time? (Sometimes you will have time during class hours to work on projects.)
    - 2 hours post lesson and will not review lesson if project is due that needs to be done outside of class hours that dat.

4. What time are you carving out for your own mental and emotional health needs?
    - Time with my daughter.

5. How will you spend your weekends?
    -Activites with my daughter.


--------
Conditionals:
1. Conditional statements, or conditionals, are Ruby statements that evaluate to true or false. The most common operators used for conditions are comparison operators:
2. All of our conditional branches will begin with the keyword if. To communicate to the Ruby program that the if statement should end, the keyword end must be used. Any code between the if and end keywords will run only if the condition is true.
3. In order to have a default response that runs when the condition is false, we need an else statement.
        greeting = "Hello"

        if greeting == "Hello"
         puts "Let's go!"
            else
         puts "Goodbye then."
        end
4. Use the keyword elsif to create more branches with additional conditions to check.
    - if condition1
        # code to execute if above condition1 evaluates to true
        elsif condition2
    # code to execute if above condition2 evaluates to true
        elsif condition3
    # code to execute if above condition3 evaluates to true
         else 
    # default code to execute if none of the other conditions evaluate to true
         end
5. && 
    - This logical operator will check two values, and both must be true in order for it to return true

6. ||
    - This logical operator will check two values, and one or both must be true in order for it to return true.



--------
Methods:
1. Syntax for Defining a Method:
    - The def and end keywords act like bookends for the code block.
    - Following the keyword def, we assign our method a name. It’s best if the name describes what the method does.
    - The code block is indented and contains all of the “instructions” for what the method should do when it is called.
    - The value on the last line of the code block is the data that the method will return when it is called.

2. Syntax for Calling a Method:
    - To instruct the interpreter to carry out the instructions in a method, the developer must write code to call or execute that method. Simply writing the name of the method, greet_a_texan in this example, calls or executes the method.
3. Naming Conventions:


--------
Problem Solving: 
1. 
2. 
3. 
4. 
5. 

test:

--------
Final Reflections: 
1. As you look back on your time in Mod 0, what are you most proud of?
    - I think I understand the overall concepts.

2. What did you learn about yourself, as a person or a student, during Mod 0?
    - I signed up late and did not prepare dedicate full time until the 27th. When Mod 1 began.

3. What is one thing you want to remember as you start this new journey to become a software developer at Turing?
    - Ask questions and be comfortable not knowing anything about this field.


